{"version":3,"sources":["Form.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","submitHandler","e","preventDefault","state","onChangeHaneler","name","target","value","setState","job","onSubmit","this","className","type","onChange","React","Component","THeader","TBody","row","names","map","item","index","key","onClick","onDelete","Table","App","newName","newNames","filter","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAkDeA,E,YAhDX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAMVC,cAAc,SAACC,GACXA,EAAEC,iBACF,EAAKH,MAAMC,cAAc,EAAKG,QAThB,EAWlBC,gBAAgB,SAACH,GACb,IAAMI,EAAKJ,EAAEK,OAAOD,KACdE,EAAMN,EAAEK,OAAOC,MACrB,EAAKC,SAAL,eACKH,EAAME,KAbX,EAAKJ,MAAM,CACPE,KAAK,GACLI,IAAI,IAJM,E,sEAoBd,OACI,0BAAMC,SAAUC,KAAKX,eACjB,gDACA,yBAAKY,UAAU,OACX,yBAAKA,UAAU,SACX,2BACIA,UAAU,eACVP,KAAK,OAAOQ,KAAK,OACjBN,MAAOI,KAAKR,MAAME,KAClBS,SAAUH,KAAKP,mBAGvB,yBAAKQ,UAAU,SACX,2BACIA,UAAU,eACVP,KAAK,MAAMQ,KAAK,OAChBN,MAAOI,KAAKR,MAAMM,IAClBK,SAAUH,KAAKP,mBAGvB,yBAAKQ,UAAU,SACX,4BAAQA,UAAU,kBAAkBC,KAAK,UAAzC,iB,GA1CLE,IAAMC,WCAnBC,EAAQ,WACV,OACI,2BAAOL,UAAU,cACb,4BACI,oCACA,mCACA,yCAKVM,EAAO,SAACnB,GACV,IAAMoB,EAAIpB,EAAMqB,MAAMC,KAAI,SAACC,EAAKC,GAAN,OACtB,wBAAIC,IAAKD,GACL,4BAAKD,EAAKjB,MACV,4BAAKiB,EAAKb,KACV,4BAAI,4BAAQG,UAAU,iBAAiBa,QAAS,kBAAI1B,EAAM2B,SAASH,KAA/D,eAGZ,OAAO,+BAAQJ,IAgBJQ,E,2MAZXD,SAAS,SAACH,GACN,EAAKxB,MAAM2B,SAASH,I,wEAGpB,OACI,2BAAOX,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOQ,MAAOT,KAAKZ,MAAMqB,MAAOM,SAAUf,KAAKe,gB,GAT3CX,IAAMC,WCeXY,E,YAhCb,WAAY7B,GAAO,IAAD,8BAChB,4CAAMA,KAQRC,cAAc,SAAC6B,GACb,EAAKrB,SAAS,CACZY,MAAM,GAAD,mBAAK,EAAKjB,MAAMiB,OAAhB,CAAsBS,OAXb,EAclBH,SAAS,SAACH,GACR,IAAMO,EAAS,EAAK3B,MAAMiB,MAAMW,QAAO,SAACZ,EAAIa,GAAL,OACrCA,IAAIT,KAEN,EAAKf,SAAS,CACZY,MAAMU,KAjBR,EAAK3B,MAAM,CACTiB,MAAM,IAHQ,E,sEAuBhB,OACE,yBAAKR,UAAU,aACb,kBAAC,EAAD,CAAMZ,cAAeW,KAAKX,gBAC1B,kBAAC,EAAD,CAAOoB,MAAOT,KAAKR,MAAMiB,MAAOM,SAAUf,KAAKe,gB,GA3BrCX,IAAMC,WCQJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5ef4e5e6.chunk.js","sourcesContent":["import React from 'react';\r\nclass Form extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            name:\"\",\r\n            job:\"\"\r\n        }\r\n    }\r\n    submitHandler=(e)=>{\r\n        e.preventDefault();\r\n        this.props.submitHandler(this.state);\r\n    }\r\n    onChangeHaneler=(e)=>{\r\n        const name=e.target.name;\r\n        const value=e.target.value;\r\n        this.setState({\r\n            [name]:value\r\n        });\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.submitHandler}>\r\n                <h3>Add name and job</h3>\r\n                <div className=\"row\">\r\n                    <div className=\"col-4\">\r\n                        <input \r\n                            className=\"form-control\" \r\n                            name=\"name\" type=\"text\" \r\n                            value={this.state.name} \r\n                            onChange={this.onChangeHaneler}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <input \r\n                            className=\"form-control\" \r\n                            name=\"job\" type=\"text\" \r\n                            value={this.state.job}\r\n                            onChange={this.onChangeHaneler}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <button className=\"btn btn-primary\" type=\"submit\">submit</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default Form;","import React from 'react';\r\nconst THeader=()=>{\r\n    return(\r\n        <thead className=\"thead-dark\">\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Job</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\nconst TBody =(props)=>{\r\n    const row=props.names.map((item,index)=>\r\n        <tr key={index}>\r\n            <td>{item.name}</td>\r\n            <td>{item.job}</td>\r\n            <td><button className=\"btn btn-danger\" onClick={()=>props.onDelete(index)}>Delete</button></td>\r\n        </tr>\r\n    );\r\n    return <tbody>{row}</tbody>\r\n}\r\nclass Table extends React.Component{\r\n    \r\n    onDelete=(index)=>{\r\n        this.props.onDelete(index);\r\n    }\r\n    render(){\r\n        return(\r\n            <table className=\"table mt-3\">\r\n                <THeader />\r\n                <TBody names={this.props.names} onDelete={this.onDelete}/>\r\n            </table>\r\n        );\r\n    }\r\n}\r\nexport default Table;","import React from 'react';\nimport Form from './Form.js'\nimport Table from './Table.js';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      names:[\n        \n      ]\n    }\n\n  }\n  submitHandler=(newName)=>{\n    this.setState({\n      names:[...this.state.names,newName]\n    });\n  }\n  onDelete=(index)=>{\n    const newNames=this.state.names.filter((row,i)=>\n      i!==index\n    );\n    this.setState({\n      names:newNames\n    });\n  }\n  render(){\n    return(\n      <div className=\"container\">\n        <Form submitHandler={this.submitHandler}/>\n        <Table names={this.state.names} onDelete={this.onDelete}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}